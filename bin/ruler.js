#!/usr/bin/env node
// Generated by CoffeeScript 1.12.6
(function() {
  var DEFAULT_TARGETS, Promise, colors, config, extract, extracter, fs, gui, measure, measurer, output, path, pkg, program, read, server, template;

  fs = require('fs');

  path = require('path');

  pkg = require('../package');

  measurer = require('./measurer');

  program = require('commander');

  Promise = require('bluebird');

  colors = require('colors/safe');

  template = require('./config-template');

  extracter = require('./extracter');

  server = require('./server');

  DEFAULT_TARGETS = require('./common');

  read = Promise.promisify(fs.readFile);

  program.version(pkg.version).description('android screen adaptation tools').option('-m, --measure [config]', 'measure targets size to output').option('-e, --extract [config]', 'extract dp sp to variable').option('-g, --gui', 'start gui server').option('-c, --config', 'generate config.json').parse(process.argv);

  measure = program.measure, extract = program.extract, gui = program.gui, config = program.config;

  if (program.rawArgs.length <= 2) {
    return program.help();
  }

  if (config) {
    output = path.join(process.cwd(), 'config.json');
    fs.writeFileSync(output, template().replace('%s', DEFAULT_TARGETS));
    return console.log((colors.cyan('+')) + " [config.json] " + (colors.yellow('generated.')));
  }

  if (gui) {
    return server();
  }

  if (extract && typeof extract === 'string') {
    return read(extract, 'utf-8').then(function(option) {
      return extracter(JSON.parse(option));
    });
  }

  if (measure && typeof measure === 'string') {
    return read(measure, 'utf-8').then(function(option) {
      return measurer(JSON.parse(option));
    });
  }

}).call(this);
